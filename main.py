import logging
import sqlite3
import re
import asyncio
import csv
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from openai import OpenAI
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile,
    ReplyKeyboardRemove
)
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "8032802242:AAFNq2Y8i5cz2fEh_s-lqV47JZzd-gNtB10"
OPENROUTER_API_KEY = "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"
ADMIN_IDS = {1349134736,1174525096}  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
MAX_REQUESTS_PER_MINUTE = 5
ITEMS_PER_PAGE = 5

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(
    api_key=OPENROUTER_API_KEY,
    base_url="https://openrouter.ai/api/v1",
    default_headers={
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://your-site.com",
        "X-Title": "Study Planner Bot"
    }
)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    BROADCAST = State()
    BLOCK_USER = State()
    VIEW_QUERIES = State()


# Database –∫–ª–∞—Å—Å
class Database:
    def __init__(self):
        self.conn = sqlite3.connect('edu_tutor.db', check_same_thread=False)
        self._init_db()

    def _init_db(self):
        with self.conn:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    interactions INTEGER DEFAULT 0,
                    last_interaction TIMESTAMP,
                    is_blocked BOOLEAN DEFAULT 0,
                    block_reason TEXT,
                    registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )''')

            # –ó–∞–ø—Ä–æ—Å—ã
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS queries (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    query_text TEXT,
                    response TEXT,
                    category TEXT,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )''')

            # –ò–Ω–¥–µ–∫—Å—ã
            self.conn.execute('''
                CREATE INDEX IF NOT EXISTS idx_queries_user 
                ON queries(user_id, timestamp)''')

    def register_user(self, user_id: int, username: str, full_name: str):
        self.conn.execute('''
            INSERT OR IGNORE INTO users (user_id, username, full_name) 
            VALUES (?, ?, ?)
        ''', (user_id, username, full_name))
        self.conn.commit()

    def log_interaction(self, user_id: int):
        self.conn.execute('''
            UPDATE users 
            SET interactions = interactions + 1,
                last_interaction = CURRENT_TIMESTAMP
            WHERE user_id = ?
        ''', (user_id,))
        self.conn.commit()

    def log_query(self, user_id: int, query: str, response: str, category: Optional[str] = None):
        self.conn.execute('''
            INSERT INTO queries (user_id, query_text, response, category)
            VALUES (?, ?, ?, ?)
        ''', (user_id, query, response, category))
        self.conn.commit()

    def is_blocked(self, user_id: int) -> bool:
        cursor = self.conn.execute(
            'SELECT is_blocked FROM users WHERE user_id = ?',
            (user_id,)
        )
        result = cursor.fetchone()
        return result[0] if result else False

    def block_user(self, user_id: int, reason: str):
        self.conn.execute('''
            UPDATE users 
            SET is_blocked = 1,
                block_reason = ?
            WHERE user_id = ?
        ''', (reason, user_id))
        self.conn.commit()

    def unblock_user(self, user_id: int):
        self.conn.execute('''
            UPDATE users 
            SET is_blocked = 0,
                block_reason = NULL
            WHERE user_id = ?
        ''', (user_id,))
        self.conn.commit()

    def get_stats(self) -> Dict[str, Any]:
        cursor = self.conn.execute('''
            SELECT 
                COUNT(DISTINCT user_id),
                (SELECT COUNT(*) FROM queries),
                SUM(is_blocked),
                (SELECT COUNT(*) FROM users 
                 WHERE registered_at > datetime('now', '-1 day'))
            FROM users
        ''')
        result = cursor.fetchone()
        return {
            'total_users': result[0],
            'total_queries': result[1],
            'blocked_users': result[2] or 0,
            'new_users': result[3]
        }

    def get_queries_page(self, page: int) -> List[Any]:
        offset = (page - 1) * ITEMS_PER_PAGE
        cursor = self.conn.execute('''
            SELECT * FROM queries 
            ORDER BY timestamp DESC 
            LIMIT ? OFFSET ?
        ''', (ITEMS_PER_PAGE, offset))
        return cursor.fetchall()


db = Database()

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
MESSAGES = {
    'start': "üöÄ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä!",
    'help': "üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @vveemoon\n‚è∞ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-20:00",
    'admin_denied': "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
    'broadcast_start': "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
    'broadcast_cancel': "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
    'block_user': "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
    'user_blocked': "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    'user_unblocked': "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    'stats': """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_users}
üÜï –ù–æ–≤—ã–µ –∑–∞ 24—á: {new_users}""",
    'request_limit': "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
    'layout_fix': "‚ö† –í–æ–∑–º–æ–∂–Ω–æ –æ–ø–µ—á–∞—Ç–∫–∞:\n{fixed_text}"
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def main_menu():
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories"),
        InlineKeyboardButton(text="‚Ñπ –ü–æ–º–æ—â—å", callback_data="help")
    )
    return keyboard.as_markup()


async def admin_panel():
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data="admin_block"),
        InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export"),
        InlineKeyboardButton(text="üìù –ó–∞–ø—Ä–æ—Å—ã", callback_data="admin_queries")
    )
    keyboard.adjust(2, repeat=True)
    return keyboard.as_markup()


# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –°–æ—Å—Ç–∞–≤–ª—è–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ —à–∞–±–ª–æ–Ω—É:
1. üéØ –¶–µ–ª—å: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å] –∑–∞ [—Å—Ä–æ–∫]
2. üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞:
   - –£—Ç—Ä–æ: [–∑–∞–¥–∞—á–∞]
   - –î–µ–Ω—å: [–∑–∞–¥–∞—á–∞]
   - –í–µ—á–µ—Ä: [–∑–∞–¥–∞—á–∞]
3. üìö –†–µ—Å—É—Ä—Å—ã:
   - YouTube-–∫–∞–Ω–∞–ª—ã: [–Ω–∞–∑–≤–∞–Ω–∏—è]
   - –£—á–µ–±–Ω–∏–∫–∏: [–Ω–∞–∑–≤–∞–Ω–∏—è]
4. üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:
   - –¢–µ—Å—Ç—ã: [—Ñ–æ—Ä–º–∞—Ç]
   - –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã: [–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å]
5. üí° –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: [–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä]
–°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
- –£–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
- –ú–∏–Ω–∏–º—É–º 200 —Å–ª–æ–≤
"""


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_command(message: Message):
    user = message.from_user
    db.register_user(user.id, user.username, user.full_name)

    if user.id in ADMIN_IDS:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=await admin_panel())
    else:
        await message.answer(MESSAGES['start'], reply_markup=await main_menu())


@dp.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    await callback.message.edit_text(MESSAGES['help'])


@dp.callback_query(F.data == "categories")
async def show_categories(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    categories = {
        "academic": "üìö –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ",
        "coding": "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "languages": "üåê –Ø–∑—ã–∫–∏",
        "creative": "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"
    }

    for key, name in categories.items():
        keyboard.button(text=name, callback_data=f"category_{key}")

    keyboard.adjust(2)
    await callback.message.edit_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=keyboard.as_markup()
    )


@dp.callback_query(F.data.startswith("category_"))
async def handle_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")


@dp.message(F.text)
async def handle_query(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if db.is_blocked(user_id):
        return await message.answer("‚ö† –í–∞—à –¥–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    count = db.conn.execute(
        '''SELECT COUNT(*) FROM queries 
        WHERE user_id = ? AND timestamp > datetime('now', '-1 minute')''',
        (user_id,)
    ).fetchone()[0]

    if count >= MAX_REQUESTS_PER_MINUTE:
        return await message.answer(MESSAGES['request_limit'])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    text = message.text.strip()
    if re.fullmatch(r'^[a-zA-Z]+$', text):
        fixed = fix_keyboard_layout(text)
        return await message.answer(MESSAGES['layout_fix'].format(fixed_text=fixed))

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    try:
        data = await state.get_data()
        response = await generate_response(text, data.get('category'))
        db.log_query(user_id, text, response, data.get('category'))
        await message.answer(response[:4000])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    finally:
        await state.clear()


# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(Command("admin"))
async def admin_command(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer(MESSAGES['admin_denied'])

    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=await admin_panel())


@dp.callback_query(F.data.startswith("admin_"))
async def admin_actions(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]

    if action == "stats":
        stats = db.get_stats()
        await callback.message.edit_text(
            MESSAGES['stats'].format(**stats),
            reply_markup=await admin_panel()
        )

    elif action == "broadcast":
        await state.set_state(AdminStates.BROADCAST)
        await callback.message.answer(
            MESSAGES['broadcast_start'],
            reply_markup=ReplyKeyboardRemove()
        )

    elif action == "block":
        await state.set_state(AdminStates.BLOCK_USER)
        await callback.message.answer(
            MESSAGES['block_user'],
            reply_markup=ReplyKeyboardRemove()
        )

    elif action == "export":
        await export_data(callback.message)

    elif action == "queries":
        await state.set_state(AdminStates.VIEW_QUERIES)
        await show_queries(callback.message, page=1)

    await callback.answer()


@dp.message(AdminStates.BROADCAST)
async def process_broadcast(message: Message, state: FSMContext):
    cursor = db.conn.execute('SELECT user_id FROM users')
    success = 0

    for row in cursor:
        try:
            await bot.send_message(row[0], message.text)
            success += 1
        except Exception:
            continue

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}/{cursor.rowcount}")
    await state.clear()


@dp.message(AdminStates.BLOCK_USER)
async def process_block_user(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        db.block_user(user_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
        await message.answer(MESSAGES['user_blocked'].format(user_id=user_id))
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        await state.clear()


async def show_queries(message: Message, page: int):
    queries = db.get_queries_page(page)
    text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"

    for q in queries:
        text += f"üïí {q[5]}\nüë§ {q[1]}\nüìÑ {q[2][:50]}...\n\n"

    keyboard = InlineKeyboardBuilder()
    if page > 1:
        keyboard.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}")
    if len(queries) == ITEMS_PER_PAGE:
        keyboard.button(text="‚ñ∂ –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page + 1}")

    await message.answer(text, reply_markup=keyboard.as_markup())


async def export_data(message: Message):
    try:
        with open('data.csv', 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['User ID', 'Query', 'Response', 'Category', 'Timestamp'])

            cursor = db.conn.execute('SELECT * FROM queries')
            for row in cursor:
                writer.writerow(row)

        await message.answer_document(FSInputFile('data.csv'))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")


def fix_keyboard_layout(text: str) -> str:
    layout = str.maketrans(
        'qwertyuiop[]asdfghjkl;\'zxcvbnm,./',
        '–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.'
    )
    return text.translate(layout)


async def generate_response(query: str, category: Optional[str] = None) -> str:
    try:
        prompt = SYSTEM_PROMPT
        if category:
            prompt += f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"

        response = client.chat.completions.create(
            model="mistralai/mixtral-8x7b-instruct",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": query}
            ],
            max_tokens=1000,
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    asyncio.run(main())